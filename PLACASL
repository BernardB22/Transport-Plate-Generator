import random
import re
import cv2

# Expresiones regulares
formatos_placas = {
    "particular": r"[A-Z]{3}-\d{3}-[A-Z]{1}",  # ABC-123-A
    "antiguo": r"[A-Z]{3}-\d{3}",             # ABC-123
    "motocicleta": r"\d{2}[A-Z]{3}\d{1}",     # 12ABC3
    "federal": r"\d{3}-[A-Z]{3}-\d{1}"        # 123-ABC-4
}

def generar_placa(tipo):
    """Genera una placa de coche basada en el tipo de veh√≠culo.""" #alfabetos para los tipos de placas que hay 
    if tipo == "particular":
        placa = f"{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}-{random.randint(100,999)}-{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}"
    elif tipo == "antiguo":
        placa = f"{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}-{random.randint(100,999)}"
    elif tipo == "motocicleta":
        placa = f"{random.randint(10,99)}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.randint(0,9)}"
    elif tipo == "federal":
        placa = f"{random.randint(100,999)}-{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}{random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')}-{random.randint(0,9)}"
    else:
        return None  
    return placa

def validar_placa(placa, tipo):
    """Verifica si la placa generada cumple con la expresion correcta."""
    return re.fullmatch(formatos_placas[tipo], placa) is not None

def escribir_placa_en_imagen(imagen_path, texto_placa, salida_path="placa_con_texto.jpg"):
    """Escribe el n√∫mero de placa sobre una imagen y la guarda."""
    
    # Cargar la imagen
    imagen = cv2.imread(imagen_path)
    
    # Definir posici√≥n del texto (aj√∫stalo seg√∫n tu imagen)
    posicion_texto = (70, 155)  # (x, y)
    font = cv2.FONT_HERSHEY_SIMPLEX
    tama√±o_fuente = 2
    color = (0, 0, 0) 
    grosor = 4

    # Escribir el texto sobre la imagen
    cv2.putText(imagen, texto_placa, posicion_texto, font, tama√±o_fuente, color, grosor, cv2.LINE_AA)

    # Guardar la nueva imagen
    cv2.imwrite(salida_path, imagen)

    # Mostrar la imagen resultante
    cv2.imshow("Placa con Texto", imagen)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    print(f" Imagen guardada con la placa: {texto_placa} en {salida_path}")

# Pedir al usuario el tipo de veh√≠culo
print("üöó Tipos de matr√≠culas disponibles:")
print("1. Particular")
print("2. Antiguo")
print("3. Motocicleta")
print("4. Federal")

opcion = input("Selecciona el tipo de veh√≠culo (1-4): ")

tipos = {
    "1": "particular",
    "2": "antiguo",
    "3": "motocicleta",
    "4": "federal"
}

tipo_vehiculo = tipos.get(opcion, None)

if tipo_vehiculo:
    placa_generada = generar_placa(tipo_vehiculo)
    if validar_placa(placa_generada, tipo_vehiculo):
        print(f" Tu nueva matr√≠cula generada es: {placa_generada}")
        
        # üì∏ Ruta de la imagen de la placa (modifica con tu archivo real)
        imagen_placa = "C:/Users/DELL/Desktop/FIRMAIMPORTANTE/placaL.png"    #ruta donde tengas guardado el fondo de la placa
        
        # üñäÔ∏è Escribir la placa en la imagen
        escribir_placa_en_imagen(imagen_placa, placa_generada)
    else:
        print(" Hubo un error generando la placa, intenta de nuevo.")
else:
    print(" Opci√≥n inv√°lida, elige un n√∫mero del 1 al 4.")
